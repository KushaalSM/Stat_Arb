from os import path
import pandas as pd
import datetime as dt
from collections import defaultdict

class ResultsCalculator:
    trades_columns_order = ['Entry_Date', 'Exit_Date', 'Sector', 'Long_Stock', 'Long_Entry_Price', 'Long_Exit_Price', 'Long_Quantity', 'Short_Stock', 'Short_Entry_Price', 'Short_Exit_Price', 'Short_Quantity', \
                        'Long_Points', 'Short_Points', 'Long_PnL', 'Short_PnL', 'Net_Points', 'Trade_PnL', 'Trade_Return', 'Trade_Duration', 'Hedge_Ratio']
    
    def __init__(self, config) -> None:
        """
        Module to generate results based on the trades logged.
        config = {
            "start_date": datetime,
            "end_date": datetime,
            "capital": int
        }
        """
        self.config = config

    def calculate_results(self, trades_list, results_path, name):
        """
        Calculates the relevant metrics and saves them in an Excel workbook.
        trades_list : List of trades generated by the strategy.
        results_path : folder where the workbook needs to be saved.
        name : name of the notebook.
        """
        if trades_list == []:
            raise Exception("Trades List is empty")
        trades_df = pd.DataFrame(trades_list)

        # Get Cumulative PnL and Daily MtM information along with the number of open positions on any given day.
        mtm_metrics_df, open_positions_dict = self.get_mtm_metrics(trades_list)
        
        # Trade related metrics.
        trade_metrics = self.get_trade_metrics(trades_df)
        if not open_positions_dict == {}:
            trade_metrics['Maximum_Open_Pairs'] = max(open_positions_dict.values())
            trade_metrics['Average_Open_Pairs'] = sum(open_positions_dict.values()) // len(open_positions_dict)
        else:
            trade_metrics['Maximum_Open_Pairs'] = 0
            trade_metrics['Average_Open_Pairs'] = 0

        trade_metrics_df = pd.DataFrame()
        trade_metrics_df['Metric'] = list(trade_metrics.keys())
        trade_metrics_df['Values'] = list(trade_metrics.values())

        # Save results in a workbook.
        workbook = pd.ExcelWriter(path=f"{results_path}/Results_{name}.xlsx", engine='xlsxwriter')
        trade_metrics_df.to_excel(excel_writer=workbook, sheet_name='Trade_Metrics', index=False)
        trades_df[self.trades_columns_order].to_excel(excel_writer=workbook, sheet_name='Tradesheet', index=False)
        mtm_metrics_df.to_excel(excel_writer=workbook, sheet_name='MTM_Metrics', index=False)
        workbook.save()
        return

    def get_trade_metrics(self, trades_df):
        """
        Calculates trade related metrics.
        """
        trade_metrics = {}
        trade_metrics['Trades'] = len(trades_df)
        trade_metrics['Winners'] = len(trades_df[trades_df['Trade_Return'] > 0])
        trade_metrics['Losers'] = len(trades_df[trades_df['Trade_Return'] <= 0])
        trade_metrics['Hit_Rate'] = round(trade_metrics['Winners'] / trade_metrics['Trades'], 3)
        if not trade_metrics['Losers'] == 0:
            trade_metrics['Win_Loss_Rate'] = round(trade_metrics['Winners'] / trade_metrics['Losers'], 3)
            trade_metrics['Average_Win_to_Average_Loss'] = abs(round(trades_df[trades_df['Trade_Return'] > 0]['Trade_Return'].mean() / \
                trades_df[trades_df['Trade_Return'] <= 0]['Trade_Return'].mean(), 3))
        else:
            trade_metrics['Win_Loss_Rate'] = 'Invalid Metric'
            trade_metrics['Average_Win_to_Average_Loss'] = 'Invalid Metric'
        trade_metrics['Max_Profit_%'] = trades_df['Trade_Return'].max()
        trade_metrics['Max_Loss_%'] = trades_df['Trade_Return'].min()
        trade_metrics['Average_Trade_Duration'] = trades_df['Trade_Duration'].mean()
        trade_metrics['Average_Trade_Return'] = trades_df['Trade_Return'].mean()
        if 'Stock_Pair' in trades_df:
            trade_metrics['Stock_Pairs_Traded'] = len(trades_df['Stock_Pair'].unique())
        return trade_metrics

    def get_mtm_metrics(self, trades_list):
        """
        Calculates capital related metrics.
        """
        day_pnl = defaultdict(float)
        open_position_dict = defaultdict(int)
        for trade in trades_list:
            unrealized_pnl_dict = trade['MtM_dict']
            for key, val in unrealized_pnl_dict.items():
                day_pnl[dt.datetime.strptime(key, '%Y-%m-%d')] += val
                open_position_dict[dt.datetime.strptime(key, '%Y-%m-%d')] += 1
        mtm_sheet = pd.DataFrame()
        mtm_sheet['Date'] = list(day_pnl.keys())
        mtm_sheet['PnL'] = list(day_pnl.values())
        mtm_sheet.sort_values(by='Date', ascending=True, inplace=True)
        mtm_sheet.reset_index(inplace=True, drop=True)
        mtm_sheet['Cumulative_PnL'] = mtm_sheet['PnL'].cumsum()
        return mtm_sheet, open_position_dict